{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"OpenCTI Documentation Space","text":"<p>Welcome to the OpenCTI Documentation space. Here you will be able to find all documents, meeting notes and presentations about the platform.</p> <p>Need more help?</p> <p>We are doing our best to keep this documentation complete, accurate and up to date. If you still have questions or you find something which is not sufficiently explained, join the Filigran Community on Slack.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>OpenCTI is an open source platform allowing organizations to manage their cyber threat intelligence knowledge and observables. It has been created in order to structure, store, organize and visualize technical and non-technical information about cyber threats.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li> <p> Deployement &amp; Setup</p> <p>Learn how to deploy and configure the platform as well as launch connectors to get the first data in OpenCTI.</p> <p> Deploy now</p> </li> <li> <p> User Guide</p> <p>Understand how to use the platform, explore the knowledge, import and export information, create dashboard, etc.</p> <p> Explore</p> </li> <li> <p> Administration</p> <p>Know how to administrate OpenCTI, create users and groups using RBAC / segregation, put retention policies and custom taxonomies.</p> <p> Customize</p> </li> </ul>"},{"location":"#latest-blog-posts","title":"Latest blog posts","text":"<p>Articles</p> <p>All tutorials are published directly on the Medium blog, this section provides a comprehensive list of the most important ones.</p>"},{"location":"deployment/installation/","title":"Installation","text":""},{"location":"deployment/overview/","title":"Overview","text":"<p>Let's get started and discover the OpenCTI platform! What is OpenCTI, which technical architecture is used to run the platform and what are the hardware requirements to deploy it in production.</p>"},{"location":"deployment/overview/#architecture","title":"Architecture","text":"<p>The OpenCTI platform relies on several external databases and services in order to work.</p> <p> </p>"},{"location":"deployment/overview/#the-graphql-api","title":"The GraphQL API","text":"<p>The API is the central part of the OpenCTI platform, allowing the clients (including the frontend) to interact with the database and the broker (messaging system). Built in NodeJS, it implements the GraphQL query language. As the API is not fully documented yet, you can explore the available methods and parameters through a GraphQL playground. An example is available on the OpenCTI demonstration instance.</p>"},{"location":"deployment/overview/#the-write-workers","title":"The write workers","text":"<p>The workers are standalone Python processes consuming messages from the RabbitMQ broker in order to do asynchronous write queries. You can launch as many workers as you need to increase the write performances. At some point, the write performances will be limited by the throughput of the database (ElasticSearch), if you have not the expected performances with 3 or 4 workers, then is will be useless to launch more and you have to think about enhancing the hardware of the database nodes (or extend your setup to a cluster).</p>"},{"location":"deployment/overview/#the-connectors","title":"The connectors","text":"<p>The connectors are third-party pieces of software (Python processes) that can play four different roles on the platform:</p> <p>You can find all currently available connector in the OpenCTI Ecosystem.</p>"},{"location":"deployment/overview/#infrastructure-requirements","title":"Infrastructure requirements","text":""},{"location":"deployment/overview/#dependencies","title":"Dependencies","text":"<p>Since OpenCTI has some dependencies, you can find below the minimum configuration and amount of resources needed to launch the OpenCTI platform. </p> <p>The minimal hardware requirements for all components of the platform, including the databases, are:</p> CPU RAM Disk type Disk space 6 cores 16GB SSD (recommanded) / Normal Depending of your content (&gt; 32GB)"},{"location":"deployment/overview/#elasticsearch","title":"ElasticSearch","text":"<p>ElasticSearch is also a JAVA process that needs a minimal amount of memory and CPUs.</p> CPU RAM Disk type Disk space 2 cores 8GB SSD (recommanded) / Normal Depending of your content (&gt; 16GB) <p>Memory management</p> <p>In order to setup the JAVA memory allocation, you can use the environment variable ES_JAVA_OPTS. You can find more information in the official ElasticSearch documentation.</p>"},{"location":"deployment/overview/#minio","title":"MinIO","text":"<p>MinIO has a very small footprint but depending on what you intend to store on OpenCTI, it could require disk space:</p> CPU RAM Disk type Disk space 1 core 128MB Normal Depending of your content (&gt; 1GB)"},{"location":"deployment/overview/#redis","title":"Redis","text":"<p>Redis has a very small footprint and only needs a tiny configuration:</p> CPU RAM Disk type Disk space 1 core 1GB Normal Depending of your content (&gt; 16GB) <p>Memory management</p> <p>You can use the option --maxmemory to limit the use. You can find more information in the Redis docker hub.</p>"},{"location":"deployment/overview/#rabbitmq","title":"RabbitMQ","text":"<p>RabbitMQ has a very small footprint and can store messages directly on the disk if it does not have enough memory.</p> CPU RAM Disk type Disk space 1 core 512MB Normal Depending of your content (&gt; 1GB) <p>Memory management</p> <p>The RabbitMQ memory configuration can be found in the RabbitMQ official documentation.</p>"},{"location":"deployment/overview/#platform","title":"Platform","text":""},{"location":"deployment/overview/#application","title":"Application","text":"<p>OpenCTI platform is based on a NodeJS runtime, with a memory limit of 512MB by default.</p> CPU RAM Disk type Disk space 2 cores 8GB Normal 256MB"},{"location":"deployment/overview/#workers-and-connectors","title":"Workers and connectors","text":"<p>OpenCTI workers and connectors are Python processes with a very small footprint. For each connector, requirements are:</p> CPU RAM Disk type Disk space 1 core 128MB Normal 128MB"}]}