{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"OpenCTI Documentation Space","text":"<p>Welcome to the OpenCTI Documentation space. Here you will be able to find all documents, meeting notes and presentations about the platform.</p> <p>Need more help?</p> <p>We are doing our best to keep this documentation complete, accurate and up to date. If you still have questions or you find something which is not sufficiently explained, join the Filigran Community on Slack.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>OpenCTI is an open source platform allowing organizations to manage their cyber threat intelligence knowledge and observables. It has been created in order to structure, store, organize and visualize technical and non-technical information about cyber threats.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li> <p> Deployement &amp; Setup</p> <p>Learn how to deploy and configure the platform as well as launch connectors to get the first data in OpenCTI.</p> <p> Deploy now</p> </li> <li> <p> User Guide</p> <p>Understand how to use the platform, explore the knowledge, import and export information, create dashboard, etc.</p> <p> Explore</p> </li> <li> <p> Administration</p> <p>Know how to administrate OpenCTI, create users and groups using RBAC / segregation, put retention policies and custom taxonomies.</p> <p> Customize</p> </li> </ul>"},{"location":"#latest-blog-posts","title":"Latest blog posts","text":"<p>Articles</p> <p>All tutorials are published directly on the Medium blog, this section provides a comprehensive list of the most important ones.</p>"},{"location":"administration/parameters/","title":"Platform","text":""},{"location":"deployment/configuration/","title":"Configuration","text":"<p>In this section, we learn how to configure OpenCTI to have it tailored to our production and development needs. </p> <p>Here are the configuration keys, for both Docker (environment variables) and manual deployment.</p>  \ud83d\udca1 The equivalent of a config variable in environment variables is the usage of a double underscores (__) for a level of config. Example: `\"providers\": {     \"ldap\": {       \"strategy\": \"LdapStrategy\"    } }` will become `PROVIDERS__LDAP__STRATEGY=LdapStrategy`  If you need to put a list of element for the key, it must have a special formatting. Example for redirect uris for openid config:  `\"PROVIDERS__OPENID__CONFIG__REDIRECT_URIS=[\\\"https://demo.opencti.io/auth/oic/callback\\\"]\"`    \ud83d\udc49 To change the allowed memory of the platform process, you can use the environment variable `NODE_OPTIONS=--max-old-space-size=8096` (where 8096 is the amount of memory in MB).   <p>API / Front</p>  \ud83d\udca1 Example to enforce references:   <pre><code>\"enforce_references\": [\n\"Threat-Actor\",\n\"Intrusion-Set\",\n...\n]\n</code></pre> <p>Schedulers / engines</p> <p>Dependencies</p>"},{"location":"deployment/configuration/#worker","title":"Worker","text":"<p>The Python worker can be configured manually using the configuration file <code>config.yml</code> or through environment variables.</p> <p>Python worker</p>"},{"location":"deployment/configuration/#dependencies","title":"Dependencies","text":"<p>Dependencies have their own set of configuration that you can found in their specific documentation.</p>  \ud83d\udca1 Sometime the documentation doesn't have every options so we try to fill the gap here."},{"location":"deployment/configuration/#elasticsearch-memory","title":"ElasticSearch memory","text":"<p>If you want to adapt the memory consumption of ElasticSearch, you can use theses options:</p> <pre><code># Add the followiung environment variable:\n\"ES_JAVA_OPTS=-Xms8g -Xmx8g\"\n</code></pre>"},{"location":"deployment/configuration/#authentication","title":"Authentication","text":""},{"location":"deployment/configuration/#introduction","title":"Introduction","text":"<p>OpenCTI supports several authentication providers. If you configure multiple strategies, they will be tested in the order you declared them.</p>  \ud83d\udca1 You need to configure/activate only that you really want to propose to your users in term of authentication   <p>The product proposes two kind of authentication strategy:</p> <ul> <li>Form (asking user for a user/password)</li> <li>Buttons (click with authentication on an external system)</li> </ul>"},{"location":"deployment/configuration/#supported-strategies","title":"Supported Strategies","text":"<p>Under the hood we technically use the strategies provided by http://www.passportjs.org/</p> <p>We integrate a subset of the strategies available with passport we if you need more we can theatrically integrate all the passport strategies.</p>"},{"location":"deployment/configuration/#localstrategy-form","title":"LocalStrategy (form)","text":"<p>This strategy used the OpenCTI database as user management.</p> <p>OpenCTI use this strategy as the default but its not the one we recommend for security reason.</p> <pre><code>\"local\": {\n\"strategy\": \"LocalStrategy\",\n\"config\": {\n\"disabled\": false\n}\n}\n</code></pre>  \ud83d\udca1 Please use the LDAP/Auth0/OpenID strategy for production deployment"},{"location":"deployment/configuration/#ldapstrategy-form","title":"LdapStrategy (form)","text":"<p>This strategy can be used to authenticate your user with your company LDAP. Based on http://www.passportjs.org/packages/passport-ldapauth/</p> <pre><code>\"ldap\": {\n\"strategy\": \"LdapStrategy\",\n\"config\": {\n\"url\": \"ldaps://mydc.domain.com:686\",\n\"bind_dn\": \"cn=Administrator,cn=Users,dc=mydomain,dc=com\",\n\"bind_credentials\": \"MY_STRONG_PASSWORD\",\n\"search_base\": \"cn=Users,dc=mydomain,dc=com\",\n\"search_filter\": \"(cn={{username}})\",\n\"mail_attribute\": \"mail\",\n// \"account_attribute\": \"givenName\",\n// \"firstname_attribute\": \"cn\",\n// \"lastname_attribute\": \"cn\",\n\"account_attrgroup_search_filteribute\": \"givenName\",\n\"allow_self_signed\": true\n}\n}\n</code></pre> <p>If you would like to use LDAP groups to automatically associate a role and/or group to users depending of its group.</p> <pre><code>\"group_search_base\": \"cn=Groups,dc=mydomain,dc=com\",\n\"group_search_filter\": \"(member={{dn}})\",\n\"roles_management\": {\n\"group_attribute\": \"cn\",\n\"groups_mapping\": [\"GROUP_NAME:Administrator\", \"GROUP_NAME_2:ROLE_NAME\", ...]\n}\n\"groups_management\": {\n\"group_attribute\": \"cn\",\n\"groups_mapping\": [\"GROUP_NAME:AdminGroup\", \"GROUP_NAME_2:GROUP_NAME\", ...]\n}\n</code></pre>"},{"location":"deployment/configuration/#samlstrategy-button","title":"SamlStrategy (button)","text":"<p>This strategy can be used to authenticate your user with your company SAML. Based on http://www.passportjs.org/packages/passport-saml/</p> <pre><code>\"saml\": {\n\"identifier\": \"saml\",\n\"strategy\": \"SamlStrategy\",\n\"config\": {\n\"issuer\": \"mytestsaml\",\n// \"account_attribute\": \"nameID\",\n// \"firstname_attribute\": \"nameID\",\n// \"lastname_attribute\": \"nameID\",\n\"entry_point\": \"https://auth.citeum.org/auth/realms/citeum/protocol/saml\",\n\"saml_callback_url\": \"http://localhost:4000/auth/saml/callback\",\n// \"private_key\": \"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwg...\",\n\"cert\": \"MIICmzCCAYMCBgF2Qt3X1zANBgkqhkiG9w0BAQsFADARMQ8w...\",\n\"roles_management\": { // Only if you need to\n\"role_attributes\": [\"Role\"],\n\"roles_mapping\": [\"asso_limeo_founder:Administrator\"]\n}\n}\n},\n</code></pre> <ul> <li>cert is mandatory (pem format), used to validate the SAML response</li> <li>private_key (pem format) is optional, only required if you want to sign the SAML client request</li> </ul>  \ud83d\udca1 **Be careful to put the cert/private key in PEM format. A lot of system give you the keys in X509 / PCKS12 format and so need to be converted.** **Example to extract from PCKS12**: openssl pkcs12 -in keystore.p12 -out newfile.pem -nodes   <p>Docker style:</p> <pre><code>- PROVIDERS__SAML__STRATEGY=SamlStrategy - \"PROVIDERS__SAML__CONFIG__LABEL=Login with SAML\"\n- PROVIDERS__SAML__CONFIG__ISSUER=mytestsaml\n- PROVIDERS__SAML__CONFIG__ENTRY_POINT=https://auth.citeum.org/auth/realms/citeum/protocol/saml\n- PROVIDERS__SAML__CONFIG__SAML_CALLBACK_URL=http://localhost:4000/auth/saml/callback\n- PROVIDERS__SAML__CONFIG__CERT=MIICmzCCAYMCBgF2Qt3X1zANBgkqhkiG9w0BAQsFADARMQ8w\n</code></pre>"},{"location":"deployment/configuration/#auth0strategy-button","title":"Auth0Strategy (button)","text":"<p>This strategy permits to use https://auth0.com/ service to handle the authentication.</p> <p>Based on http://www.passportjs.org/packages/passport-auth0/</p> <pre><code>\"authzero\": {\n\"identifier\": \"auth0\",\n\"strategy\": \"Auth0Strategy\",\n\"config\": {\n\"clientID\": \"XXXXXXXXXXXXXXXXXX\",\n\"baseURL\": \"https://demo.opencti.io\",\n\"clientSecret\": \"XXXXXXXXXXXXXXXXXX\",\n\"callback_url\": \"https://demo.opencti.io/auth/auth0/callback\",\n\"domain\": \"luatix.eu.auth0.com\",\n\"audience\": \"XXXXXXXXXXXXXXX\",\n\"scope\": \"openid email profile XXXXXXXXXXXXXXX\"\n}\n}\n</code></pre>"},{"location":"deployment/configuration/#openidconnectstrategy-button","title":"OpenIDConnectStrategy (button)","text":"<p>This strategy can use the https://openid.net/connect/ protocol to handle the authentication.</p> <p>Based on https://github.com/panva/node-openid-client that is more powerful than the passport one.</p> <pre><code>\"oic\": {\n\"identifier\": \"oic\",\n\"strategy\": \"OpenIDConnectStrategy\",\n\"config\": {\n\"label\": \"Login with OpenID\",\n\"issuer\": \"https://xxxxxxx/auth/realms/xxxx\",\n\"client_id\": \"XXXXXXXXXXXXXXXXXX\",\n\"client_secret\": \"XXXXXXXXXXXXXXXXXX\",\n\"redirect_uris\": [\"https://demo.opencti.io/auth/oic/callback\"]\n}\n}\n</code></pre> <p>Docker style:</p> <pre><code>- PROVIDERS__OPENID__STRATEGY=OpenIDConnectStrategy - \"PROVIDERS__OPENID__CONFIG__LABEL=Login with OpenID\"\n- PROVIDERS__OPENID__CONFIG__ISSUER=https://xxxxxxx/auth/realms/xxxx\n- PROVIDERS__OPENID__CONFIG__CLIENT_ID=XXXXXXXXXXXXXXXXXX\n- PROVIDERS__OPENID__CONFIG__CLIENT_SECRET=XXXXXXXXXXXXXXXXXX\n- \"PROVIDERS__OPENID__CONFIG__REDIRECT_URIS=[\\\"https://demo.opencti.io/auth/oic/callback\\\"]\"\n</code></pre> <p>Examples of roles mapping in OpenID strategies (for group mappings, just replace \u201croles\u201d with \u201cgroups\u201d).</p> <p>In the mapping, the syntax is <code>OpenID-Role:OpenCTI-Group-Name</code>.</p> <pre><code>\"roles_management\": {\n\"roles_scope\": \"roles\",\n\"roles_path\": [\"roles\", \"realm_access.roles\", \"resource_access.account.roles\"],\n\"roles_mapping\": [\"asso_luatix_admin:Administrator\", \"asso_luatix_supporter:Default\", \"asso_luatix_active:Default\", \"asso_luatix_sponsor:Default\", \"asso_luatix_founder:Default\"]\n}\n</code></pre> <p>In Docker style:</p> <pre><code>- \"PROVIDERS__OPENID__CONFIG__ROLES_MANAGEMENT__ROLES_SCOPE=roles\"\n- \"PROVIDERS__OPENID__CONFIG__ROLES_MANAGEMENT__ROLES_PATH=[\\\"roles\\\", \\\"realm_access.roles\\\", \\\"resource_access.account.roles\\\"]\"\n- \"PROVIDERS__OPENID__CONFIG__ROLES_MANAGEMENT__ROLES_MAPPING=[\\\"asso_luatix_admin:Administrator\\\", \\\"asso_luatix_supporter:Default\\\", \\\"asso_luatix_active:Default\\\", \\\"asso_luatix_sponsor:Default\\\", \\\"asso_luatix_founder:Default\\\"]\"\n</code></pre>"},{"location":"deployment/configuration/#facebookstrategy-button","title":"FacebookStrategy (button)","text":"<p>This strategy can authenticate your users with Facebook</p> <p>Based on http://www.passportjs.org/packages/passport-facebook/</p> <pre><code>\"facebook\": {\n\"identifier\": \"facebook\",\n\"strategy\": \"FacebookStrategy\",\n\"config\": {\n\"client_id\": \"XXXXXXXXXXXXXXXXXX\",\n\"client_secret\": \"XXXXXXXXXXXXXXXXXX\",\n\"callback_url\": \"https://demo.opencti.io/auth/facebook/callback\"\n}\n}\n</code></pre>"},{"location":"deployment/configuration/#googlestrategy-button","title":"GoogleStrategy (button)","text":"<p>This strategy can authenticate your users with Google</p> <p>Based on http://www.passportjs.org/packages/passport-google-oauth/</p> <pre><code>\"google\": {\n\"identifier\": \"google\",\n\"strategy\": \"GoogleStrategy\",\n\"config\": {\n\"client_id\": \"XXXXXXXXXXXXXXXXXX\",\n\"client_secret\": \"XXXXXXXXXXXXXXXXXX\",\n\"callback_url\": \"https://demo.opencti.io/auth/google/callback\"\n}\n}\n</code></pre>"},{"location":"deployment/configuration/#githubstrategy-button","title":"GithubStrategy (button)","text":"<p>This strategy can authenticate your users with Github</p> <p>Based on http://www.passportjs.org/packages/passport-github/</p> <pre><code>\"github\": {\n\"identifier\": \"github\",\n\"strategy\": \"GithubStrategy\",\n\"config\": {\n\"client_id\": \"XXXXXXXXXXXXXXXXXX\",\n\"client_secret\": \"XXXXXXXXXXXXXXXXXX\",\n\"callback_url\": \"https://demo.opencti.io/auth/github/callback\"\n}\n}\n</code></pre> <p>-</p>"},{"location":"deployment/configuration/#clientcertstrategy-button","title":"ClientCertStrategy (button)","text":"<p>This strategy can authenticate a user based on ssl client certificate. For this you need to configure your OCTI to start in https, for example</p> <pre><code>\"port\": 443,\n\"https_cert\": {\n\"key\": \"/cert/server_key.pem\",\n\"crt\": \"/cert/server_cert.pem\",\n\"reject_unauthorized\":true\n},\n</code></pre> <p>And the add the ClientCertStrategy</p> <pre><code>\"cert\": {\n\"strategy\":\"ClientCertStrategy\",\n\"config\": {\n\"label\":\"CLIENT CERT\"\n}\n}\n</code></pre> <p>Then when accessing for the first time OCTIm your browser will ask for the certificate you want to use.</p>"},{"location":"deployment/configuration/#examples","title":"Examples","text":""},{"location":"deployment/configuration/#ldap-then-fallback-to-local","title":"LDAP then fallback to local","text":"<p>In this example the users have a login form and need to enter username / password.</p> <p>Authentication is done on LDAP first, then locally if user not authenticated by the LDAP, then fail.</p> <p>If you use local deployment, here are an example for the <code>production.json</code> file:</p> <pre><code>\"providers\": {\n\"ldap\": {\n\"strategy\": \"LdapStrategy\",\n\"config\": {\n\"url\": \"ldap://mydc.mydomain.com:389\",\n\"bind_dn\": \"cn=Administrator,cn=Users,dc=mydomain,dc=com\",\n\"bind_credentials\": \"MY_STRONG_PASSWORD\",\n\"search_base\": \"cn=Users,dc=mydomain,dc=com\",\n\"search_filter\": \"(cn={{username}})\",\n\"mail_attribute\": \"mail\",\n\"account_attribute\": \"givenName\"\n}\n},\n\"local\": {\n\"strategy\": \"LocalStrategy\"\n\"config\": {\n\"disabled\": false\n}\n}\n}\n</code></pre> <p>If you use docker deployment, here an example for the <code>docker-compose.yml</code> file:</p> <pre><code>- PROVIDERS__LDAP__STRATEGY=LdapStrategy\n- PROVIDERS__LDAP__CONFIG__URL=ldaps://mydc.limeo.org:636\n- PROVIDERS__LDAP__CONFIG__BIND_DN=cn=Administrator,cn=Users,dc=limeo,dc=org\n- PROVIDERS__LDAP__CONFIG__BIND_CREDENTIALS=XXXXXXXXXX\n- PROVIDERS__LDAP__CONFIG__SEARCH_BASE=cn=Users,dc=limeo,dc=org\n- PROVIDERS__LDAP__CONFIG__SEARCH_FILTER=(cn={{username}})\n- PROVIDERS__LDAP__CONFIG__MAIL_ATTRIBUTE=mail\n- PROVIDERS__LDAP__CONFIG__ACCOUNT_ATTRIBUTE=givenName\n- PROVIDERS__LDAP__CONFIG__ALLOW_SELF_SIGNED=true\n- PROVIDERS__LOCAL__STRATEGY=LocalStrategy\n</code></pre>"},{"location":"deployment/connectors/","title":"Connectors","text":""},{"location":"deployment/installation/","title":"Installation","text":""},{"location":"deployment/installation/#using-docker","title":"Using Docker","text":""},{"location":"deployment/installation/#introduction","title":"Introduction","text":"<p>OpenCTI can be deployed using the docker-compose command.</p> <p>Memory management</p> <p>For production deployment, we advise you to deploy ElasticSearch and Redis manually in a dedicated environment and then to start the other components using Docker.</p>"},{"location":"deployment/installation/#1-pre-requisites","title":"1. Pre-requisites","text":"<p>*\ud83d\udc27\u00a0Linux:*</p> <pre><code>$ sudo apt-get install docker-compose\n</code></pre> <p>\u2318 MacOS</p> <p>Download:\u00a0https://www.docker.com/products/docker-desktop</p>"},{"location":"deployment/installation/#2-clone-the-repository","title":"2. Clone the repository","text":"<pre><code>$ mkdir -p /path/to/your/app &amp;&amp; cd /path/to/your/app\n$ git clone https://github.com/OpenCTI-Platform/docker.git\n$ cd docker\n</code></pre>"},{"location":"deployment/installation/#3-configure-the-environment","title":"3. Configure the environment","text":"<p>Before running the\u00a0<code>docker-compose</code>\u00a0command, the\u00a0<code>docker-compose.yml</code>\u00a0file must be configured.</p> <p>There are two ways to do that:</p> <ol> <li>Use environment variables as it is proposed and you have an exemple in the\u00a0<code>.env.sample</code>\u00a0file (ie.\u00a0<code>APP__ADMIN__EMAIL=${OPENCTI_ADMIN_EMAIL}</code>).</li> <li>Directly set the parameters in the\u00a0<code>docker-compose.yml</code>.</li> </ol> <p>If setting within the environment, you can reference the methodology in the\u00a0Environment setup on OpenCTI's Notion page\u00a0- located below for ease:</p>"},{"location":"deployment/installation/#linux","title":"\ud83d\udc27\u00a0Linux:","text":"<pre><code>sudo apt install -y jq\n\ncd ~/docker\n(cat &lt;&lt; EOF\nOPENCTI_ADMIN_EMAIL=admin@opencti.io\nOPENCTI_ADMIN_PASSWORD=CHANGEMEPLEASE\nOPENCTI_ADMIN_TOKEN=$(cat /proc/sys/kernel/random/uuid)\nMINIO_ROOT_USER=$(cat /proc/sys/kernel/random/uuid)\nMINIO_ROOT_PASSWORD=$(cat /proc/sys/kernel/random/uuid)\nRABBITMQ_DEFAULT_USER=guest\nRABBITMQ_DEFAULT_PASS=guest\nCONNECTOR_HISTORY_ID=$(cat /proc/sys/kernel/random/uuid)\nCONNECTOR_EXPORT_FILE_STIX_ID=$(cat /proc/sys/kernel/random/uuid)\nCONNECTOR_EXPORT_FILE_CSV_ID=$(cat /proc/sys/kernel/random/uuid)\nCONNECTOR_IMPORT_FILE_STIX_ID=$(cat /proc/sys/kernel/random/uuid)\nCONNECTOR_IMPORT_REPORT_ID=$(cat /proc/sys/kernel/random/uuid)\nEOF\n) &gt; .env\n</code></pre>"},{"location":"deployment/installation/#macos","title":"\u2318 MacOS","text":"<pre><code>brew install jq\ncd ~/docker\n (cat &lt;&lt;EOF\nOPENCTI_ADMIN_EMAIL=admin@opencti.io\nOPENCTI_ADMIN_PASSWORD=CHANGEMEPLEASE\nOPENCTI_ADMIN_TOKEN=$(uuidgen)\nMINIO_ROOT_USER=$(uuidgen)\nMINIO_ROOT_PASSWORD=$(uuidgen)\nRABBITMQ_DEFAULT_USER=guest\nRABBITMQ_DEFAULT_PASS=guest\nCONNECTOR_HISTORY_ID=$(uuidgen)\nCONNECTOR_EXPORT_FILE_STIX_ID=$(uuidgen)\nCONNECTOR_EXPORT_FILE_CSV_ID=$(uuidgen)\nCONNECTOR_IMPORT_FILE_STIX_ID=$(uuidgen)\nCONNECTOR_IMPORT_REPORT_ID=$(uuidgen)\nEOF\n) &gt; .env\n</code></pre> <pre><code>cd ~/docker # trick to export the .env \nexport $(cat .env | grep -v \"#\" | xargs)\n</code></pre>"},{"location":"deployment/installation/#4-memory-management-settings","title":"4. Memory Management Settings","text":"\ud83d\udca1 For additional memory management information see the Memory configuration notes section   <p>As OpenCTI has a dependency on ElasticSearch, you have to set the\u00a0<code>vm.max_map_count</code>\u00a0before running the containers, as mentioned in the\u00a0ElasticSearch documentation.</p> <pre><code>$ sudo sysctl -w vm.max_map_count=1048575\n</code></pre> <p>To make this parameter persistent, add the following to the end of your\u00a0<code>/etc/sysctl.conf</code>:</p> <pre><code>$ vm.max_map_count=1048575\n</code></pre>"},{"location":"deployment/installation/#5-run-opencti-full-stack-including-ui","title":"5. Run OpenCTI - Full-stack, including UI","text":""},{"location":"deployment/installation/#using-single-node-docker","title":"Using single node Docker","text":""},{"location":"deployment/installation/#using-docker-swarm","title":"Using Docker swarm","text":"<p>After changing your\u00a0<code>.env</code>\u00a0file run\u00a0<code>docker-compose</code>\u00a0in detached (<code>-d</code>) mode:</p> <p>In order to have the best experience with Docker, we recommend using the Docker stack feature. In this mode you will have the capacity to easily scale your deployment. </p>  \ud83d\udca1 **Top Tip:** If you are looking for a easy way to manage your docker installation and containers try [Portainer](https://documentation.portainer.io/quickstart/?hsCtaTracking=cb3a059b-7f57-4333-a92f-b06202ef8690%7C4427d7bc-1ae8-4a30-812c-d30ee496008f).   <pre><code># ****\ud83d\udc27**** Linux only\n$ sudo systemctl start docker.service\n# Run docker-compose in detached \n$ docker-compose up -d\n</code></pre> <pre><code># If your virtual machine is not a part of a Swarm cluster, please use:\n$ docker swarm init\n</code></pre> <p>Put your environment variables in\u00a0<code>/etc/environment</code>:</p> <pre><code># If you already exported your variables to .env from above:\n$ sudo cat .env &gt;&gt; /etc/environment\n$ sudo bash -c 'cat .env &gt;&gt; /etc/environment\u2019\n$ sudo docker stack deploy --compose-file docker-compose.yml opencti\n</code></pre> <p>You can now go to\u00a0http://localhost:8080\u00a0and log in with the credentials configured in your environment variables.</p>"},{"location":"deployment/installation/#6-run-opencti-infrastructure-with-uigraphql-in-development-mode","title":"6. Run OpenCTI infrastructure with UI/GraphQL in development mode","text":"<p>In order to develop OpenCTI UI/GraphQL in the most efficient manner we have provided a\u00a0<code>docker-compose.dev.yml</code>\u00a0which stands up the back-end/infrastructure of OpenCTI, with the expectation that you will run the OpenCTI front-end (React/GraphQL) separately.</p> <p>This docker-compose exposes all necessary ports for the UI/GraphQL to attach to in order to support local development.</p> <p>To run the services required for local development run:</p> <pre><code>$ sudo docker-compose -f docker-compose.dev.yml up -d\n</code></pre> <p>To configure/run the UI/GraphQL we would direct you to the\u00a0Notion documentation</p>"},{"location":"deployment/installation/#appendices","title":"Appendices","text":""},{"location":"deployment/installation/#a-how-to-update-your-docker-instances","title":"A. How to update your docker instances","text":""},{"location":"deployment/installation/#for-single-node-docker","title":"For single node Docker","text":"<pre><code>$ sudo docker-compose stop\n$ sudo docker-compose pull\n$ sudo docker-compose up -d\n</code></pre>"},{"location":"deployment/installation/#for-docker-swarm","title":"For Docker swarm","text":"<p>For each of services, you have to run the following command:</p> <pre><code>$ sudo docker service update --force service_name\n</code></pre>"},{"location":"deployment/installation/#b-how-to-deploy-behind-a-reverse-proxy","title":"B. How to deploy behind a reverse proxy","text":"<p>If you want to use OpenCTI behind a reverse proxy with a context path, like\u00a0<code>https://myproxy.com/opencti</code>, please change the base_path configuration.</p> <ul> <li><code>APP__BASE_PATH=/opencti</code></li> </ul> <p>By default OpenCTI use websockets so don't forget to configure your proxy for this usage, an example with\u00a0<code>Nginx</code>:</p> <pre><code>location / {\nproxy_cache               off;\nproxy_buffering           off;\nproxy_http_version 1.1;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\nproxy_set_header Host $host;\nchunked_transfer_encoding off;\nproxy_pass http:/YOUR_UPSTREA_BACKEND;\n}\n</code></pre>"},{"location":"deployment/installation/#c-how-to-persist-data","title":"C. How to persist data","text":"<p>The default for OpenCTI data is to be persistent.</p> <p>If you do not wish the data to persist:</p> <pre><code>$ mv docker-compose.override.no-persist.yml docker-compose.override.yml\n</code></pre>"},{"location":"deployment/installation/#d-memory-configuration-additional-information","title":"D. Memory configuration: additional information","text":""},{"location":"deployment/installation/#opencti-platform","title":"OpenCTI - Platform","text":"<p>OpenCTI platform is based on a NodeJS runtime, with a memory limit of 8GB by default. If you encounter <code>OutOfMemory</code> exceptions, this limit could be changed:</p> <pre><code>- NODE_OPTIONS=--max-old-space-size=8096\n</code></pre>"},{"location":"deployment/installation/#opencti-workers-and-connectors","title":"OpenCTI - Workers and connectors","text":"<p>OpenCTI workers and connectors are Python processes. If you want to limit the memory of the process, we recommend to directly use Docker to do that. You can find more information in the official Docker documentation.</p>  \ud83d\udca1 If you do not use Docker stack, consider using the `--compatibility` option."},{"location":"deployment/installation/#elasticsearch","title":"ElasticSearch","text":"<p>ElasticSearch is also a JAVA process. In order to setup the JAVA memory allocation, you can use the environment variable <code>ES_JAVA_OPTS</code>.</p>  \ud83d\udca1 The minimal recommended option today is `-Xms8G -Xmx8G`   <p>You can find more information in the official ElasticSearch documentation.</p>"},{"location":"deployment/installation/#redis","title":"Redis","text":"<p>Redis has a very small footprint on keys but will consume memory for the stream. By default the size of the stream is limited to 2 millions</p>  \ud83d\udca1 With 2 million of events in the stream, the memory footprint will be around `8G`   <p>You can find more information in the Redis docker hub.</p>"},{"location":"deployment/installation/#minio","title":"MinIO","text":"<p>MinIO is a small process and does not require a high amount of memory. More information are available for Linux here on the Kernel tuning guide.</p>"},{"location":"deployment/installation/#rabbitmq","title":"RabbitMQ","text":"<p>The RabbitMQ memory configuration can be find in the RabbitMQ official documentation. RabbitMQ will consumed memory until a specific threshold, therefore it should be configure along with the Docker memory limitation.</p>"},{"location":"deployment/installation/#e-load-balancing","title":"E. Load-balancing","text":"<p>Ingesting lots of data from connectors can cause the OpenCTI platform to slow down and make it difficult for analysts to use the platform properly for their work. A simple way of solving this issue is to have 2 parallel OpenCTI platform containers running at the same time and to distribute the workload between them.</p> <ol> <li>OpenCTI container #1 is the responsible go-to address for all connectors for ingesting data</li> <li>OpenCTI container #2 is the analysts\u2019 UI interface for their research</li> </ol> <p>Since both OpenCTI containers are using the same backend infrastructure, both platforms are able to access the same data while balancing the workload between them.</p>"},{"location":"deployment/installation/#f-updating-opencti-containers","title":"F. Updating OpenCTI containers","text":"<p>Before applying this procedure, please update your <code>docker-compose.yml</code> file with the new version number of container images.</p>"},{"location":"deployment/installation/#using-single-node-docker_1","title":"Using single node Docker","text":""},{"location":"deployment/installation/#using-docker-swarm_1","title":"Using Docker swarm","text":"<pre><code>$ docker-compose up -d\n</code></pre> <p>For each of services, you have to run the following command:</p> <pre><code>$ docker service update --force service_name\n</code></pre>"},{"location":"deployment/installation/#g-deployment-behind-a-reverse-proxy","title":"G. Deployment behind a reverse proxy","text":"<p>If you want to use OpenCTI behind a reverse proxy with a context path, like <code>https://myproxy.com/opencti</code>, please change the <code>base_path</code> configuration.</p> <pre><code>- APP__BASE_PATH=/opencti\n</code></pre> <p>By default OpenCTI use websockets and SSE so don't forget to configure your proxy for this usage, an example with <code>Nginx</code>:</p> <pre><code>location / {\nproxy_cache               off;\nproxy_buffering           off;\nproxy_http_version 1.1;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\nproxy_set_header Host $host;\nchunked_transfer_encoding off;\nproxy_pass http://YOUR_UPSTREAM_BACKEND;\n}\n</code></pre>"},{"location":"deployment/installation/#community-additions","title":"Community Additions","text":""},{"location":"deployment/installation/#setup-with-caddy-server-thanks-to-sukesh-ak","title":"Setup with Caddy Server (thanks to @sukesh-ak)","text":"<p>Setup and automate FREE valid SSL for OpenCTI, using an OpenSource project called\u00a0Caddy Server\u00a0with very minimal effort.</p>"},{"location":"deployment/installation/#about-caddy","title":"About Caddy","text":"<p>Caddy 2 is a powerful, enterprise-ready, open source web server with\u00a0automatic HTTPS\u00a0written in Go. Caddy works well as a direct install and also using Docker.</p>"},{"location":"deployment/installation/#using-docker_1","title":"Using Docker","text":"<p>OpenCTI runs all its components in individual containers. For accessing the WebUI, by default it exposes opencti service on port 8080 locally.</p> <p>It\u2019s easy to setup reverse proxy with FREE SSL using Caddy with very minimal effort. So lets check the steps for setting it up</p> <ul> <li>Configure DNS with A record pointing to your OpenCTI public IP address</li> <li>Create a base folder for config file <code>'Caddyfile'</code></li> <li>Create a <code>docker-compose</code> file for Caddy</li> <li>Create a container using <code>docker-compose run</code></li> </ul> <pre><code># Create a DNS A/AAAA record pointing your domain to the public IP address\n$ cti.domain.com  A  &lt;public-IP-address-for-OpenCTI-instance&gt;\n</code></pre> <p>Make sure to wait for the DNS record to complete propagation (depending on TTL). Otherwise automatic SSL creation would not work.</p> <p>Caddy uses 2 volumes for data (storing certificates etc) &amp; config.Create a file called <code>'Caddyfile'</code> in the local folder for configuration, which will be mapped to <code>/etc/caddy/Caddyfile</code> through docker-compose file as below.</p> <pre><code># /etc/caddy/Caddyfile\ncti.domain.com {\nreverse_proxy http://opencti:8080\n}\n</code></pre>  \ud83d\udca1 Port 80 mapping is not necessary but it helps in automatic redirection if clients try the HTTP url.   <pre><code># **docker-compose-caddy.yml** \nversion: \"3.7\"\nservices:\n      caddy:\n        image: caddy\n        restart: unless-stopped\n        ports:\n          - \"80:80\"\n- \"443:443\"\nvolumes:\n          - ./Caddyfile:/etc/caddy/Caddyfile\n          - caddy_data:/data\n          - caddy_config:/config\n\nnetworks:\n  default:\n    external: true\nname: &lt;your OpenCTI network name&gt;\n\nvolumes:\n  caddy_data:\n  caddy_config:\n</code></pre> <p>Since you are running Caddy in docker, you need to make it part of OpenCTI network. Reverse proxy takes care of everything else. This also means you don't need to expose OpenCTI <code>8080</code> port outside the container. So you can remove <code>-port</code> setting in OpenCTI <code>docker-compose</code> file.</p> <p>Now just get it running and Caddy will request and get SSL certificate automagically for your domain.</p> <pre><code>docker-compose -f docker-compose-caddy.yml up -d\n</code></pre>"},{"location":"deployment/installation/#resources","title":"Resources","text":"<p>How Caddy automatic SSL works https://caddyserver.com/docs/automatic-https</p> <p>Using Caddy with Load Balancer https://caddy.community/t/load-balancing-caddy/10467</p>"},{"location":"deployment/integrations/","title":"Intezgrations","text":""},{"location":"deployment/overview/","title":"Overview","text":"<p>Let's get started and discover the OpenCTI platform! What is OpenCTI, which technical architecture is used to run the platform and what are the hardware requirements to deploy it in production.</p>"},{"location":"deployment/overview/#architecture","title":"Architecture","text":"<p>The OpenCTI platform relies on several external databases and services in order to work.</p> <p> </p>"},{"location":"deployment/overview/#the-graphql-api","title":"The GraphQL API","text":"<p>The API is the central part of the OpenCTI platform, allowing the clients (including the frontend) to interact with the database and the broker (messaging system). Built in NodeJS, it implements the GraphQL query language. As the API is not fully documented yet, you can explore the available methods and parameters through a GraphQL playground. An example is available on the OpenCTI demonstration instance.</p>"},{"location":"deployment/overview/#the-write-workers","title":"The write workers","text":"<p>The workers are standalone Python processes consuming messages from the RabbitMQ broker in order to do asynchronous write queries. You can launch as many workers as you need to increase the write performances. At some point, the write performances will be limited by the throughput of the database (ElasticSearch), if you have not the expected performances with 3 or 4 workers, then is will be useless to launch more and you have to think about enhancing the hardware of the database nodes (or extend your setup to a cluster).</p>"},{"location":"deployment/overview/#the-connectors","title":"The connectors","text":"<p>The connectors are third-party pieces of software (Python processes) that can play four different roles on the platform:</p> <p>You can find all currently available connector in the OpenCTI Ecosystem.</p>"},{"location":"deployment/overview/#infrastructure-requirements","title":"Infrastructure requirements","text":""},{"location":"deployment/overview/#dependencies","title":"Dependencies","text":"<p>Since OpenCTI has some dependencies, you can find below the minimum configuration and amount of resources needed to launch the OpenCTI platform. </p> <p>The minimal hardware requirements for all components of the platform, including the databases, are:</p> CPU RAM Disk type Disk space 6 cores 16GB SSD (recommanded) / Normal Depending of your content (&gt; 32GB)"},{"location":"deployment/overview/#elasticsearch","title":"ElasticSearch","text":"<p>ElasticSearch is also a JAVA process that needs a minimal amount of memory and CPUs.</p> CPU RAM Disk type Disk space 2 cores 8GB SSD (recommanded) / Normal Depending of your content (&gt; 16GB) <p>Memory management</p> <p>In order to setup the JAVA memory allocation, you can use the environment variable ES_JAVA_OPTS. You can find more information in the official ElasticSearch documentation.</p>"},{"location":"deployment/overview/#minio","title":"MinIO","text":"<p>MinIO has a very small footprint but depending on what you intend to store on OpenCTI, it could require disk space:</p> CPU RAM Disk type Disk space 1 core 128MB Normal Depending of your content (&gt; 1GB)"},{"location":"deployment/overview/#redis","title":"Redis","text":"<p>Redis has a very small footprint and only needs a tiny configuration:</p> CPU RAM Disk type Disk space 1 core 1GB Normal Depending of your content (&gt; 16GB) <p>Memory management</p> <p>You can use the option --maxmemory to limit the use. You can find more information in the Redis docker hub.</p>"},{"location":"deployment/overview/#rabbitmq","title":"RabbitMQ","text":"<p>RabbitMQ has a very small footprint and can store messages directly on the disk if it does not have enough memory.</p> CPU RAM Disk type Disk space 1 core 512MB Normal Depending of your content (&gt; 1GB) <p>Memory management</p> <p>The RabbitMQ memory configuration can be found in the RabbitMQ official documentation.</p>"},{"location":"deployment/overview/#platform","title":"Platform","text":""},{"location":"deployment/overview/#application","title":"Application","text":"<p>OpenCTI platform is based on a NodeJS runtime, with a memory limit of 512MB by default.</p> CPU RAM Disk type Disk space 2 cores 8GB Normal 256MB"},{"location":"deployment/overview/#workers-and-connectors","title":"Workers and connectors","text":"<p>OpenCTI workers and connectors are Python processes with a very small footprint. For each connector, requirements are:</p> CPU RAM Disk type Disk space 1 core 128MB Normal 128MB"},{"location":"deployment/upgrade/","title":"Upgrade","text":""},{"location":"usage/cases-reports/","title":"Platform","text":""},{"location":"usage/dashboards/","title":"Platform","text":""},{"location":"usage/import-export/","title":"Platform","text":""},{"location":"usage/knowledge/","title":"Platform","text":""},{"location":"usage/notifications/","title":"Platform","text":""},{"location":"usage/platform/","title":"Platform","text":""}]}